// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// O schema foi divido da seguinte maneira:
// modelo-principal.prisma: Domínios de sistema, usuários, permissões, API, etc.
// modelo-etapas-iniciais.prisma: Prospecção, Cadastro e Vistoria
// modelo-etapas-finais.prisma: Notificação, Averbação, Logística, Monitoramento PEUC, Monitoramento IPTU 
// lista-etapas-iniciais.prisma: Enumeradores de etapas iniciais
// lista-etapas-finais.prisma: Enumeradores de etapas finais

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "postgresqlExtensions", "fullTextSearch"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Usuario {
  id        String    @id @default(uuid())
  nome      String
  login     String    @unique
  email     String    @unique
  permissao Permissao @default(USR)
  status    Int       @default(1)

  ultimologin  DateTime @default(now())
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt

  Perfil Perfil?

  @@map("usuarios")
}

model Perfil {
  id            Int           @id @default(autoincrement())
  usuarioId     String        @unique @default(uuid())
  estadoAtivo   Boolean       @default(true)
  nomePrimeiro  String?       @db.VarChar(20)
  nomeMeio      String?       @db.VarChar(20)
  nomeUltimo    String?       @db.VarChar(40)
  usuarioLDAP   String?
  senhaLembrete String?
  cargo         Cargo?        @default(outro)
  departamento  Departamento? @default(outro)
  fotoPerfil    String?       @db.VarChar(256)
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime      @default(now()) @updatedAt
  deletado      Boolean       @default(false)

  Usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@map("perfis")
}

model Auditoria {
  id           Int      @id @default(autoincrement())
  nomeRota     String
  registroId   Int?
  usuarioId    String
  acaoTipo     String
  registroTipo String
  alteracao    Json
  criadoEm     DateTime @default(now())
}

model Asset {
  id          Int      @id @default(autoincrement())
  nomeArquivo String
  tipo        String
  url         String
  criadoEm    DateTime @default(now())
  usuarioId   String?

  AssetVistoria Vistoria? @relation(fields: [vistoriaId], references: [id], onDelete: Cascade)
  vistoriaId    Int?

  @@map("assets")
}
